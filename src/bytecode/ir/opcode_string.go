// Code generated by "stringer -type=Opcode"; DO NOT EDIT.

package ir

import "fmt"

const _Opcode_name = "OpEmptyOpLocalRefOpLocalSetOpLocalBindOpScopeExitOpPanicOpNoreturnCallOpReturnOpCallOpConstRefOpStackRefOpStackSetOpDropOpVarRefOpVarSetOpSetCarOpSetCdrOpCarOpCdrOpArrayRefOpArraySetOpSubstrOpConcatOpStringEqOpStringLtOpToLowerOpToUpperOpIsConsOpIsStringOpIsNumOpIsIntOpIsSymbolOpNumAddOpNumAdd1OpNumSubOpNumSub1OpNumMulOpNumQuoOpNumEqOpNumLtOpNumLteOpNumGtOpNumGteOpNumNegOpNumMaxOpNumMinOpRemOpEqOpEqualOpNotOpMakeListOpMakeConsOpCatchOpJmpOpJmpNilOpJmpNotNilOpJmpNilElsePopOpJmpNotNilElsePopOpRelJmpOpRelJmpNilOpRelJmpNotNilOpRelJmpNilElsePopOpRelJmpNotNilElsePop"

var _Opcode_index = [...]uint16{0, 7, 17, 27, 38, 49, 56, 70, 78, 84, 94, 104, 114, 120, 128, 136, 144, 152, 157, 162, 172, 182, 190, 198, 208, 218, 227, 236, 244, 254, 261, 268, 278, 286, 295, 303, 312, 320, 328, 335, 342, 350, 357, 365, 373, 381, 389, 394, 398, 405, 410, 420, 430, 437, 442, 450, 461, 476, 494, 502, 513, 527, 545, 566}

func (i Opcode) String() string {
	if i < 0 || i >= Opcode(len(_Opcode_index)-1) {
		return fmt.Sprintf("Opcode(%d)", i)
	}
	return _Opcode_name[_Opcode_index[i]:_Opcode_index[i+1]]
}
